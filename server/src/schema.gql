# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type TeamMember {
  id: ID!
  user: User!
  team: Team!
  role: TeamRole!
  positions: [MemberPosition!]!
}

enum TeamRole {
  OWNER
  MANAGER
  MEMBER
}

type Team {
  id: ID!
  googleId: String!
  name: String!
  image: String!
  description: String!
  email: String!
  color: String!
  kind: TeamKind!
  parent: Team
  children: [Team!]!
  positions: [Team!]!
  members: [Team!]!
}

enum TeamKind {
  TASKFORCE
  GUILD
  CLAN
  SQUAD
  CHAPTER
  MANAGEMENT
}

type Position {
  id: ID!
  name: String!
  description: String!
  image: String
  team: Position
  users: [MemberPosition!]!
}

type MemberPosition {
  id: ID!
  from: DateTime!
  to: DateTime
  notes: String
  position: Position!
  teamMember: TeamMember!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: ID!
  firstName: String!
  lastName: String!
  primaryEmail: String!
  recoveryEmail: String!
  phone: String!
  image: String!
  googleId: String!
  status: UserStatus!
  role: UserRole!
  teams: [TeamMember!]!
  positions: [MemberPosition!]!
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
}

enum UserRole {
  ADMIN
  USER
}

type Query {
  user(id: String!): User!
  me: User!
  users(search: String, role: UserRole, ids: [ID!]): [User!]!
  memberPositions(teamMemberId: String = "true"): [MemberPosition!]!
  positions(search: String, teamId: ID, global: Boolean): [Position!]!
  teams(search: String, parentId: ID, kind: TeamKind): [Team!]!
  team(id: ID!): Team!
  teamMembers(nested: Boolean = true, teamId: ID!, role: TeamRole): [TeamMember!]!
}

type Mutation {
  createUser(data: CreateUserInput!): User!
  deleteUser(id: ID!): Boolean!
  migrateGoogleUsers: [User!]!
  createMemberPosition(data: CreateMemberPositionInput!): MemberPosition!
  updateMemberPosition(data: UpdateMemberPositionInput!): MemberPosition!
  deleteMemberPosition(id: ID!): Boolean!
  createPosition(data: CreatePositionInput!): Position!
  updatePosition(data: UpdatePositionInput!): Position!
  deletePosition(id: ID!): Boolean!
  createTeam(data: CreateTeamInput!): Team!
  deleteTeam(id: ID!): Boolean!
  createTeamMember(data: CreateTeamMemberInput!): TeamMember!
  deleteTeamMember(id: ID!): Boolean!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  password: String!
  primaryEmail: String!
  recoveryEmail: String!
}

input CreateMemberPositionInput {
  teamMemberId: ID!
  positionId: ID!
  from: DateTime!
  to: DateTime
  notes: String
}

input UpdateMemberPositionInput {
  id: ID!
  teamMemberId: ID
  positionId: ID
  from: DateTime
  to: DateTime
  notes: String
}

input CreatePositionInput {
  name: String!
  description: String = ""
  image: String
  teamId: ID
}

input UpdatePositionInput {
  id: ID!
  name: String
  description: String
  image: String
  teamId: ID
}

input CreateTeamInput {
  name: String!
  email: String!
  kind: TeamKind!
  image: String
  description: String
  color: String
  parentId: ID
}

input CreateTeamMemberInput {
  userId: ID!
  teamId: ID!
  role: TeamRole
}
